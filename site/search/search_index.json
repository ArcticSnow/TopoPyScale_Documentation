{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"quickstart/","text":"Quick Start Basic usage Setup your Python environment Create your project directory Configure the file config.ini to fit your problem (see config.ini for an example) Run TopoPyScale import pandas as pd from TopoPyScale import topoclass as tc from matplotlib import pyplot as plt # ========= STEP 1 ========== # Load Configuration config_file = './config.ini' mp = tc . Topoclass ( config_file ) # Compute parameters of the DEM (slope, aspect, sky view factor) mp . compute_dem_param () # ========== STEP 2 =========== # Extract DEM parameters for points of interest (centroids or physical points) # ----- Option 1: # Compute clustering of the input DEM and extract cluster centroids mp . extract_dem_cluster_param () # plot clusters mp . toposub . plot_clusters_map () # plot sky view factor mp . toposub . plot_clusters_map ( var = 'svf' , cmap = plt . cm . viridis ) # ------ Option 2: # inidicate in the config file the .csv file containing a list of point coordinates (!!! must same coordinate system as DEM !!!) mp . extract_pts_param ( method = 'linear' , index_col = 0 ) # ========= STEP 3 ========== # compute solar geometry and horizon angles mp . compute_solar_geometry () mp . compute_horizon () # ========= STEP 4 ========== # Perform the downscaling mp . downscale_climate () # ========= STEP 5 ========== # explore the downscaled dataset. For instance the temperature difference between each point and the first one ( mp . downscaled_pts . t - mp . downscaled_pts . t . isel ( point_id = 0 )) . plot () plt . show () # ========= STEP 6 ========== # Export output to desired format mp . to_netcdf () TopoClass will create a file structure in the project folder (see below). TopoPyScale assumes you have a DEM in GeoTiFF, and a set of climate data in netcdf (following ERA5 variable conventions). TopoPyScale can easier segment the DEM using clustering (e.g. K-mean), or a list of predefined point coordinates in pts_list.csv can be provided. Make sure all parameters in config.ini are correct. my_project/ \u251c\u2500\u2500 inputs/ \u251c\u2500\u2500 dem/ \u251c\u2500\u2500 my_dem.tif \u2514\u2500\u2500 pts_list.csv (optional) \u2514\u2500\u2500 climate/ \u251c\u2500\u2500 PLEV*.nc \u2514\u2500\u2500 SURF*.nc \u251c\u2500\u2500 outputs/ \u2514\u2500\u2500 config.ini","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#basic-usage","text":"Setup your Python environment Create your project directory Configure the file config.ini to fit your problem (see config.ini for an example) Run TopoPyScale import pandas as pd from TopoPyScale import topoclass as tc from matplotlib import pyplot as plt # ========= STEP 1 ========== # Load Configuration config_file = './config.ini' mp = tc . Topoclass ( config_file ) # Compute parameters of the DEM (slope, aspect, sky view factor) mp . compute_dem_param () # ========== STEP 2 =========== # Extract DEM parameters for points of interest (centroids or physical points) # ----- Option 1: # Compute clustering of the input DEM and extract cluster centroids mp . extract_dem_cluster_param () # plot clusters mp . toposub . plot_clusters_map () # plot sky view factor mp . toposub . plot_clusters_map ( var = 'svf' , cmap = plt . cm . viridis ) # ------ Option 2: # inidicate in the config file the .csv file containing a list of point coordinates (!!! must same coordinate system as DEM !!!) mp . extract_pts_param ( method = 'linear' , index_col = 0 ) # ========= STEP 3 ========== # compute solar geometry and horizon angles mp . compute_solar_geometry () mp . compute_horizon () # ========= STEP 4 ========== # Perform the downscaling mp . downscale_climate () # ========= STEP 5 ========== # explore the downscaled dataset. For instance the temperature difference between each point and the first one ( mp . downscaled_pts . t - mp . downscaled_pts . t . isel ( point_id = 0 )) . plot () plt . show () # ========= STEP 6 ========== # Export output to desired format mp . to_netcdf () TopoClass will create a file structure in the project folder (see below). TopoPyScale assumes you have a DEM in GeoTiFF, and a set of climate data in netcdf (following ERA5 variable conventions). TopoPyScale can easier segment the DEM using clustering (e.g. K-mean), or a list of predefined point coordinates in pts_list.csv can be provided. Make sure all parameters in config.ini are correct. my_project/ \u251c\u2500\u2500 inputs/ \u251c\u2500\u2500 dem/ \u251c\u2500\u2500 my_dem.tif \u2514\u2500\u2500 pts_list.csv (optional) \u2514\u2500\u2500 climate/ \u251c\u2500\u2500 PLEV*.nc \u2514\u2500\u2500 SURF*.nc \u251c\u2500\u2500 outputs/ \u2514\u2500\u2500 config.ini","title":"Basic usage"}]}